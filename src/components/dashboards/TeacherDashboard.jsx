import { FiBook, FiClock, FiX, FiUser, FiHome, FiLogOut, FiBell } from 'react-icons/fi';
import ProfileModal from './components/modals/ProfileModal';
import NotificationModal from './components/modals/NotificationModal';
import { MdNotifications } from 'react-icons/md';

import React, { useState, useEffect } from 'react';
import apiService from '../../services/api';
import '../Dashboard.css';
import '../../styles/dashboard/teacher.css';
import { FiLoader, FiBarChart2, FiCalendar, FiChevronLeft, FiChevronRight } from 'react-icons/fi';
import { useNavigate } from 'react-router-dom';
import TeacherOverview from './components/TeacherOverview';
import ClassesList from './components/ClassesList';
import { HiAcademicCap } from 'react-icons/hi';
import ScheduleSection from './components/ScheduleSection';
import SalarySection from './components/SalarySection';

function TeacherDashboard({ user, onLogout, onGoHome }) {
  const [activeTab, setActiveTab] = useState('classes');
  const [selectedDate, setSelectedDate] = useState(null);
  const [currentMonth, setCurrentMonth] = useState(new Date());
  const [loading, setLoading] = useState(false);

  const [showProfileModal, setShowProfileModal] = useState(false)
  const [showNotificationModal, setShowNotificationModal] = useState(false);
  const [showClassDetail, setShowClassDetail] = useState(false);
  const [selectedClass, setSelectedClass] = useState(null);
  const [apiData, setApiData] = useState({
    classes: [],
    students: [],
    schedule: {}
  })
  const [error, setError] = useState(null)
  const navigate = useNavigate()
  const [selectedSalaryMonth, setSelectedSalaryMonth] = useState({month: 'all', year: 'all'})
  const [salaryPage, setSalaryPage] = useState(1);
  const salaryPerPage = 5;

  const [notifications, setNotifications] = useState([]);
  const [loadingNotifications, setLoadingNotifications] = useState(false);
  const [myNotifications, setMyNotifications] = useState([]);
  const [loadingMyNotifications, setLoadingMyNotifications] = useState(false);

  // Fetch API data khi component mount v√† khi tab thay ƒë·ªïi
  useEffect(() => {
    // Log user info for debugging
    console.log('üë§ User info after login:', user);
    const fetchData = async () => {
      setLoading(true);
      setError(null);

      try {
        // Test connection tr∆∞·ªõc
        console.log('üß™ Ki·ªÉm tra k·∫øt n·ªëi server...');
        const connectionResult = await apiService.testConnection();
        if (!connectionResult.success) {
          throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi server: ' + (connectionResult.message || ''));
        }
        console.log('‚úÖ Server connection OK, ki·ªÉm tra authentication...');

        // L·∫•y danh s√°ch l·ªõp d·∫°y t·ª´ API (d√πng teacherId)
        let classes = [];
        let schedule = {};

        // Log raw API data for debugging (move after res is defined)
        try {
          // Always use user.roleId as teacherId for API calls
          const teacherId = user?.roleId;
          if (!teacherId) {
            throw new Error('Kh√¥ng t√¨m th·∫•y teacherId (user.roleId) trong th√¥ng tin ng∆∞·ªùi d√πng.');
          }
          // Fix: N·∫øu user.roleData?.classId c√≥ d·ªØ li·ªáu, fetch t·ª´ng classId n·∫øu API tr·∫£ v·ªÅ r·ªóng
          let res = await apiService.getTeacherClasses(apiService.getToken(), teacherId);
          console.log('üì¶ API l·ªõp h·ªçc tr·∫£ v·ªÅ:', res);
          if (res && Array.isArray(res.data) && res.data.length === 0 && Array.isArray(user?.roleData?.classId) && user.roleData.classId.length > 0) {
            // N·∫øu API tr·∫£ v·ªÅ r·ªóng nh∆∞ng user c√≥ classId, th·ª≠ fetch t·ª´ng classId
            const classDetails = [];
            const forbiddenClassIds = [];
            for (const classId of user.roleData.classId) {
              try {
                const classRes = await apiService.getClassById(apiService.getToken(), classId);
                if (classRes && classRes.data) classDetails.push(classRes.data);
              } catch (e) {
                // N·∫øu l·ªói l√† 403, l∆∞u l·∫°i classId b·ªã c·∫•m truy c·∫≠p
                if (e && e.message && e.message.includes('403')) {
                  forbiddenClassIds.push(classId);
                }
                // B·ªè qua c√°c l·ªói kh√°c
              }
            }
            classes = classDetails;
            // N·∫øu t·∫•t c·∫£ classId ƒë·ªÅu b·ªã forbidden, b√°o l·ªói r√µ r√†ng
            if (classes.length === 0 && forbiddenClassIds.length === user.roleData.classId.length) {
              throw new Error('B·∫°n ƒë√£ ƒë∆∞·ª£c ph√¢n c√¥ng v√†o c√°c l·ªõp h·ªçc nh∆∞ng kh√¥ng c√≥ quy·ªÅn xem th√¥ng tin c√°c l·ªõp n√†y.\n\nNguy√™n nh√¢n c√≥ th·ªÉ l√† do b·∫°n ch∆∞a ƒë∆∞·ª£c c·∫•p quy·ªÅn truy c·∫≠p v√†o c√°c l·ªõp n√†y tr√™n h·ªá th·ªëng.\n\nVui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n ho·∫∑c b·ªô ph·∫≠n k·ªπ thu·∫≠t ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ c·∫•p quy·ªÅn truy c·∫≠p.');
            } else if (forbiddenClassIds.length > 0) {
              setError('M·ªôt s·ªë l·ªõp b·∫°n ƒë∆∞·ª£c ph√¢n c√¥ng kh√¥ng th·ªÉ truy c·∫≠p do thi·∫øu quy·ªÅn truy c·∫≠p.\n\nDanh s√°ch l·ªõp kh√¥ng truy c·∫≠p ƒë∆∞·ª£c: ' + forbiddenClassIds.join(', ') + '\n\nVui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n ho·∫∑c b·ªô ph·∫≠n k·ªπ thu·∫≠t ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.');
            }
          } else if (res && res.data && Array.isArray(res.data)) {
            // Log raw API data for debugging
            console.log('üü¢ API l·ªõp h·ªçc tr·∫£ v·ªÅ (raw):', res.data);
            classes = res.data;
            // Log class schedulePreview for each class
            classes.forEach(cls => {
            });
          } else {
            throw new Error('D·ªØ li·ªáu l·ªõp h·ªçc tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá.');
          }
          // Build schedule object from all classes
          for (const cls of classes) {
            if (cls.schedule && cls.schedule.daysOfLessonInWeek && cls.schedule.startDate && cls.schedule.endDate) {
              // Generate all dates for this class's schedule
              const start = new Date(cls.schedule.startDate);
              const end = new Date(cls.schedule.endDate);
              for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {
                if (cls.schedule.daysOfLessonInWeek.includes(d.getDay())) {
                  const dateKey = d.toISOString().split('T')[0];
                  if (!schedule[dateKey]) schedule[dateKey] = [];
                  schedule[dateKey].push({
                    id: cls.id,
                    class: cls.className,
                    time: cls.schedule.time || '',
                    room: cls.room || '',
                    topic: cls.schedule.topic || '',
                    studentCount: cls.students ? (Array.isArray(cls.students) ? cls.students.length : cls.students) : undefined
                  });
                }
              }
            }
          }
        } catch (err) {
          setError('Kh√¥ng th·ªÉ l·∫•y danh s√°ch l·ªõp h·ªçc t·ª´ server. ' + (err && err.message ? err.message : ''));
          classes = [];
          schedule = {};
        }
        setApiData({
          classes: classes && classes.length > 0 ? classes : [],
          students: [],
          schedule: schedule || {},
        });
      } catch (error) {
        setError('L·ªói khi t·∫£i d·ªØ li·ªáu: ' + (error.message || error.toString()));
        setApiData({
          classes: [],
          students: [],
          schedule: {},
        });
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [activeTab, user]);

  // Khi ƒë·ªïi th√°ng ·ªü tab schedule, kh√¥ng c·∫ßn g·ªçi l·∫°i API ri√™ng, ch·ªâ c·∫ßn gi·ªØ schedule t·ª´ classes
  useEffect(() => {
    // No-op: schedule is always built from classes
  }, [currentMonth, activeTab, user]);

  useEffect(() => {
    const fetchNotifications = async () => {
      setLoadingNotifications(true);
      try {
        const token = apiService.getToken();
        const res = await apiService.getNotificationsForRole(token);
        if (res && res.data && Array.isArray(res.data)) {
          setNotifications(res.data);
        } else if (res && res.notifications && Array.isArray(res.notifications)) {
          setNotifications(res.notifications);
        } else {
          setNotifications([]);
        }
      } catch (e) {
        setNotifications([]);
      } finally {
        setLoadingNotifications(false);
      }
    };
    fetchNotifications();
  }, []);

  // Fetch my notifications (notifications created by this user)
  useEffect(() => {
    const fetchMyNotifications = async () => {
      if (activeTab !== 'my-notifications') return;
      
      setLoadingMyNotifications(true);
      try {
        const token = apiService.getToken();
        const res = await apiService.getMyNotifications(token);
        console.log('üì¢ My notifications response:', res);
        
        if (res && res.data && Array.isArray(res.data)) {
          setMyNotifications(res.data);
        } else if (res && res.notifications && Array.isArray(res.notifications)) {
          setMyNotifications(res.notifications);
        } else {
          setMyNotifications([]);
        }
      } catch (e) {
        console.error('‚ùå Error fetching my notifications:', e);
        setMyNotifications([]);
      } finally {
        setLoadingMyNotifications(false);
      }
    };
    fetchMyNotifications();
  }, [activeTab]);

  // H√†m t·∫°o calendar th√°ng, l·∫•y d·ªØ li·ªáu l·ªãch h·ªçc t·ª´ c√°c l·ªõp
  const generateCalendarDays = () => {
    const year = currentMonth.getFullYear();
    const month = currentMonth.getMonth();
    const today = new Date();

    // Chu·∫©n b·ªã map ng√†y -> danh s√°ch l·ªõp h·ªçc c√≥ bu·ªïi h·ªçc h√¥m ƒë√≥
    const classScheduleMap = {};
    // N·∫øu c√≥ tr∆∞·ªùng schedulePreview th√¨ parse ƒë·ªÉ l·∫•y th·ª©/ng√†y d·∫°y
    apiData.classes.forEach(cls => {
      if (cls.schedulePreview) {
        // V√≠ d·ª•: "T2, T4, T6 (11/8/2025 - 19/11/2025)"
        const match = cls.schedulePreview.match(/([T2-7, ]+)\s*\((\d{1,2}\/\d{1,2}\/\d{4})\s*-\s*(\d{1,2}\/\d{1,2}\/\d{4})\)/);
        if (match) {
          const daysOfWeekStr = match[1].replace(/\s/g, ''); // "T2,T4,T6"
          const startDateStr = match[2];
          const endDateStr = match[3];
          // Chuy·ªÉn "T2,T4,T6" th√†nh m·∫£ng s·ªë th·ª© trong tu·∫ßn (T2=1, ..., T7=6, CN=0)
          const dayMap = { 'CN': 0, 'T2': 1, 'T3': 2, 'T4': 3, 'T5': 4, 'T6': 5, 'T7': 6 };
          const daysOfWeek = daysOfWeekStr.split(',').map(d => dayMap[d]).filter(d => d !== undefined);
          const [d1, m1, y1] = startDateStr.split('/').map(Number);
          const [d2, m2, y2] = endDateStr.split('/').map(Number);
          const start = new Date(y1, m1 - 1, d1);
          const end = new Date(y2, m2 - 1, d2);
          for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {
            if (daysOfWeek.includes(d.getDay())) {
              const dateKey = d.toISOString().split('T')[0];
              if (!classScheduleMap[dateKey]) classScheduleMap[dateKey] = [];
              classScheduleMap[dateKey].push({
                id: cls._id || cls.id,
                class: cls.className,
                time: cls.schedule && cls.schedule.time ? cls.schedule.time : '',
                room: cls.room || '',
                topic: cls.schedule && cls.schedule.topic ? cls.schedule.topic : '',
                studentCount: cls.studentCount || (cls.students ? (Array.isArray(cls.students) ? cls.students.length : cls.students) : undefined)
              });
            }
          }
        }
      } else if (cls.schedule && cls.schedule.daysOfLessonInWeek && cls.schedule.startDate && cls.schedule.endDate) {
        // Fallback: d√πng schedule g·ªëc n·∫øu c√≥
        const start = new Date(cls.schedule.startDate);
        const end = new Date(cls.schedule.endDate);
        for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {
          if (cls.schedule.daysOfLessonInWeek.includes(d.getDay())) {
            const dateKey = d.toISOString().split('T')[0];
            if (!classScheduleMap[dateKey]) classScheduleMap[dateKey] = [];
            classScheduleMap[dateKey].push({
              id: cls._id || cls.id,
              class: cls.className,
              time: cls.schedule.time || '',
              room: cls.room || '',
              topic: cls.schedule.topic || '',
              studentCount: cls.studentCount || (cls.students ? (Array.isArray(cls.students) ? cls.students.length : cls.students) : undefined)
            });
          }
        }
      }
    });

    // Ng√†y ƒë·∫ßu ti√™n c·ªßa th√°ng
    const firstDay = new Date(year, month, 1);
    // Ng√†y cu·ªëi c√πng c·ªßa th√°ng
    const lastDay = new Date(year, month + 1, 0);
    // Th·ª© c·ªßa ng√†y ƒë·∫ßu ti√™n (0 = Ch·ªß nh·∫≠t, 1 = Th·ª© 2, ...)
    const startDay = firstDay.getDay();
    const daysInMonth = lastDay.getDate();
    const days = [];

    // Th√™m c√°c ng√†y c·ªßa th√°ng tr∆∞·ªõc ƒë·ªÉ fill tu·∫ßn ƒë·∫ßu
    const prevMonth = new Date(year, month - 1, 0);
    const daysInPrevMonth = prevMonth.getDate();
    for (let i = startDay - 1; i >= 0; i--) {
      const date = new Date(year, month - 1, daysInPrevMonth - i);
      const dateKey = date.toISOString().split('T')[0];
      days.push({
        date: date.getDate(),
        fullDate: date,
        isCurrentMonth: false,
        isToday: false,
        hasSchedule: !!classScheduleMap[dateKey],
        scheduleCount: classScheduleMap[dateKey] ? classScheduleMap[dateKey].length : 0,
        scheduleList: classScheduleMap[dateKey] || []
      });
    }

    // Th√™m c√°c ng√†y c·ªßa th√°ng hi·ªán t·∫°i
    for (let day = 1; day <= daysInMonth; day++) {
      const date = new Date(year, month, day);
      const dateKey = date.toISOString().split('T')[0];
      days.push({
        date: day,
        fullDate: date,
        isCurrentMonth: true,
        isToday: date.toDateString() === today.toDateString(),
        hasSchedule: !!classScheduleMap[dateKey],
        scheduleCount: classScheduleMap[dateKey] ? classScheduleMap[dateKey].length : 0,
        scheduleList: classScheduleMap[dateKey] || []
      });
    }

    // Th√™m c√°c ng√†y c·ªßa th√°ng sau ƒë·ªÉ fill tu·∫ßn cu·ªëi
    const remainingDays = 42 - days.length; // 6 tu·∫ßn * 7 ng√†y
    for (let day = 1; day <= remainingDays; day++) {
      const date = new Date(year, month + 1, day);
      const dateKey = date.toISOString().split('T')[0];
      days.push({
        date: day,
        fullDate: date,
        isCurrentMonth: false,
        isToday: false,
        hasSchedule: !!classScheduleMap[dateKey],
        scheduleCount: classScheduleMap[dateKey] ? classScheduleMap[dateKey].length : 0,
        scheduleList: classScheduleMap[dateKey] || []
      });
    }
    return days;
  };

  const calendarDays = generateCalendarDays()
  const monthNames = [
    'Th√°ng 1', 'Th√°ng 2', 'Th√°ng 3', 'Th√°ng 4', 'Th√°ng 5', 'Th√°ng 6',
    'Th√°ng 7', 'Th√°ng 8', 'Th√°ng 9', 'Th√°ng 10', 'Th√°ng 11', 'Th√°ng 12'
  ]

  const handleDateClick = (day) => {
    if (day.hasSchedule) {
      setSelectedDate(day.fullDate)
    }
  }

  const handlePrevMonth = () => {
    setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1))
    setSelectedDate(null)
  }

  const handleNextMonth = () => {
    setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1))
    setSelectedDate(null)
  }

  // L·∫•y danh s√°ch l·ªõp h·ªçc c√≥ l·ªãch h·ªçc trong ng√†y ƒë∆∞·ª£c ch·ªçn
  const getSelectedDateSchedule = () => {
    if (!selectedDate) return [];
    // const dateKey = selectedDate.toISOString().split('T')[0];
    // D√πng l·ªãch ƒë√£ build t·ª´ generateCalendarDays
    const found = calendarDays.find(day => day.fullDate.toDateString() === selectedDate.toDateString());
    return found && found.scheduleList ? found.scheduleList : [];
  };

  // Loading component
  const LoadingSpinner = () => (
    <div className="loading-container">
      <FiLoader className="loading-spinner" />
      <span>ƒêang t·∫£i d·ªØ li·ªáu...</span>
    </div>
  )

  // Error component
  const ErrorMessage = ({ message, onRetry }) => (
    <div className="error-container">
      <p className="error-message">{message}</p>
      
      {message.includes('CORS policy') && (
        <div className="cors-help">
          <p style={{ fontSize: '0.9rem', marginTop: '1rem', color: '#666' }}>
            üí° <strong>ƒê·ªÉ fix CORS issue:</strong><br/>
            1. D·ª´ng dev server (Ctrl+C)<br/>
            2. Ch·∫°y l·∫°i: <code>npm run dev</code><br/>
            3. Vite proxy s·∫Ω bypass CORS
          </p>
        </div>
      )}
      
      {onRetry && (
        <button className="btn btn-primary" onClick={onRetry}>
          Th·ª≠ l·∫°i
        </button>
      )}
    </div>
  )

  // S·ª≠a l·ªói: ƒêƒÉng xu·∫•t ph·∫£i x√≥a token v√† reload v·ªÅ trang login
  const handleLogout = () => {
    apiService.removeToken();
    if (typeof onLogout === 'function') onLogout();
    window.location.href = '/login';
  };

  const formatSchedule = (schedule) => {
    if (!schedule) return 'Ch∆∞a c√≥ l·ªãch h·ªçc'  
    return schedule
  }

  const getStatusBadge = (status) => {
    const statusMap = {
      active: { text: 'ƒêang ho·∫°t ƒë·ªông', className: 'status-active' },
      inactive: { text: 'T·∫°m ngh·ªâ', className: 'status-inactive' },
      completed: { text: 'ƒê√£ ho√†n th√†nh', className: 'status-completed' }
    }
    
    const statusInfo = statusMap[status] || { text: 'Kh√¥ng x√°c ƒë·ªãnh', className: 'status-unknown' }
    
    return <span className={`status-badge ${statusInfo.className}`}>{statusInfo.text}</span>
  }

  const handleGoHome = () => {
    navigate('/');
    if (onGoHome) onGoHome();
  };

  // D·ªØ li·ªáu m·∫´u nhi·ªÅu th√°ng:
  const salaryData = Array.from({length:18}, (_,i) => {
    const now = new Date();
    const date = new Date(now.getFullYear(), now.getMonth() - i, 1);
    const soBuoiDay = 15 + (i%5);
    const luongMoiBuoi = 350000;
    const daNhan = i%3===0 ? soBuoiDay*luongMoiBuoi : Math.floor(soBuoiDay*luongMoiBuoi*0.6);
    const tongLuong = soBuoiDay * luongMoiBuoi;
    const conLai = tongLuong - daNhan;
    return {
      key: i,
      month: date.getMonth()+1,
      year: date.getFullYear(),
      soBuoiDay,
      luongMoiBuoi,
      daNhan,
      conLai,
      tongLuong,
      trangThai: conLai > 0 ? 'Ch∆∞a thanh to√°n h·∫øt' : 'ƒê√£ thanh to√°n ƒë·ªß',
    };
  });

  // Component hi·ªÉn th·ªã danh s√°ch th√¥ng b√°o ƒë√£ t·∫°o
  const MyNotificationsSection = ({ myNotifications, loading, error, onRetry }) => {
    if (loading) {
      return (
        <div className="section">
          <div className="section-header">
            <h2 className="section-title">
              <FiBell />
              Th√¥ng b√°o ƒë√£ t·∫°o
            </h2>
          </div>
          <div className="loading-container">
            <FiLoader className="loading-spinner" />
            <span>ƒêang t·∫£i danh s√°ch th√¥ng b√°o...</span>
          </div>
        </div>
      );
    }

    if (error) {
      return (
        <div className="section">
          <div className="section-header">
            <h2 className="section-title">
              <FiBell />
              Th√¥ng b√°o ƒë√£ t·∫°o
            </h2>
          </div>
          <ErrorMessage message={error} onRetry={onRetry} />
        </div>
      );
    }

    const formatDate = (dateString) => {
      try {
        const date = new Date(dateString);
        return date.toLocaleDateString('vi-VN', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        });
      } catch (e) {
        return dateString;
      }
    };

    const getNotificationTypeBadge = (type) => {
      const typeMap = {
        'General': { text: 'Th√¥ng b√°o chung', color: '#007bff' },
        'Emergency': { text: 'Kh·∫©n c·∫•p', color: '#dc3545' },
        'Schedule': { text: 'L·ªãch h·ªçc', color: '#28a745' },
        'Event': { text: 'S·ª± ki·ªán', color: '#ffc107' }
      };
      
      const typeInfo = typeMap[type] || { text: type || 'Kh√°c', color: '#6c757d' };
      
      return (
        <span style={{
          background: typeInfo.color,
          color: 'white',
          padding: '4px 8px',
          borderRadius: '4px',
          fontSize: '0.8rem',
          fontWeight: '600'
        }}>
          {typeInfo.text}
        </span>
      );
    };

    return (
      <div className="section">
        <div className="section-header">
          <h2 className="section-title">
            <FiBell />
            Th√¥ng b√°o ƒë√£ t·∫°o
          </h2>
          <p className="section-subtitle">
            Danh s√°ch c√°c th√¥ng b√°o b·∫°n ƒë√£ t·∫°o ({myNotifications.length})
          </p>
        </div>

        {myNotifications.length === 0 ? (
          <div style={{
            textAlign: 'center',
            padding: '3rem',
            color: '#666',
            background: '#f8f9fa',
            borderRadius: '8px',
            border: '1px solid #e9ecef'
          }}>
            <FiBell size={48} style={{ marginBottom: '1rem', opacity: 0.5 }} />
            <p style={{ fontSize: '1.1rem', marginBottom: '0.5rem' }}>
              Ch∆∞a c√≥ th√¥ng b√°o n√†o ƒë∆∞·ª£c t·∫°o
            </p>
            <p style={{ fontSize: '0.9rem', opacity: 0.7 }}>
              C√°c th√¥ng b√°o b·∫°n t·∫°o s·∫Ω hi·ªÉn th·ªã t·∫°i ƒë√¢y
            </p>
          </div>
        ) : (
          <div className="notifications-grid">
            {myNotifications.map((notification, index) => (
              <div key={notification._id || notification.id || index} className="notification-card" style={{
                background: 'white',
                border: '1px solid #e9ecef',
                borderRadius: '8px',
                padding: '1.5rem',
                marginBottom: '1rem',
                boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
                transition: 'transform 0.2s ease, box-shadow 0.2s ease'
              }}>
                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: '1rem' }}>
                  <div style={{ flex: 1 }}>
                    <h3 style={{ 
                      margin: '0 0 0.5rem 0', 
                      color: '#b30000',
                      fontSize: '1.1rem',
                      fontWeight: '600'
                    }}>
                      {notification.title || 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ'}
                    </h3>
                    <div style={{ display: 'flex', gap: '0.5rem', alignItems: 'center' }}>
                      {getNotificationTypeBadge(notification.type)}
                      <span style={{ 
                        fontSize: '0.85rem', 
                        color: '#666',
                        background: '#f8f9fa',
                        padding: '2px 6px',
                        borderRadius: '3px'
                      }}>
                        {formatDate(notification.createdAt || notification.date)}
                      </span>
                    </div>
                  </div>
                </div>
                
                <div style={{ marginBottom: '1rem' }}>
                  <p style={{ 
                    margin: 0, 
                    lineHeight: '1.5',
                    color: '#333'
                  }}>
                    {notification.content || notification.message || 'Kh√¥ng c√≥ n·ªôi dung'}
                  </p>
                </div>

                {notification.targetRoles && notification.targetRoles.length > 0 && (
                  <div style={{ marginTop: '1rem', paddingTop: '1rem', borderTop: '1px solid #e9ecef' }}>
                    <span style={{ fontSize: '0.85rem', color: '#666', fontWeight: '600' }}>
                      G·ª≠i ƒë·∫øn: 
                    </span>
                    <div style={{ display: 'flex', gap: '0.5rem', marginTop: '0.5rem', flexWrap: 'wrap' }}>
                      {notification.targetRoles.map((role, idx) => (
                        <span key={idx} style={{
                          background: '#e3f2fd',
                          color: '#1976d2',
                          padding: '2px 6px',
                          borderRadius: '3px',
                          fontSize: '0.8rem'
                        }}>
                          {role === 'Student' ? 'H·ªçc vi√™n' : 
                           role === 'Parent' ? 'Ph·ª• huynh' : 
                           role === 'Teacher' ? 'Gi√°o vi√™n' : 
                           role === 'Admin' ? 'Qu·∫£n tr·ªã vi√™n' : role}
                        </span>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
      </div>
    );
  };
 
  return (
    <div className="dashboard teacher-dashboard">
      <TeacherOverview
        user={user}
        showProfileModal={showProfileModal}
        setShowProfileModal={setShowProfileModal}
        onGoHome={handleGoHome}
        onLogout={handleLogout}
      />
      <div className="dashboard-content">
        <aside className="sidebar">
          <nav className="nav-menu">
            <button 
              className={`nav-item ${activeTab === 'classes' ? 'active' : ''}`}
              onClick={() => setActiveTab('classes')}
            >
              <HiAcademicCap className="icon" />
              L·ªõp h·ªçc
            </button>
            <button 
              className={`nav-item ${activeTab === 'schedule' ? 'active' : ''}`}
              onClick={() => setActiveTab('schedule')}
            >
              <FiCalendar className="icon" />
              L·ªãch d·∫°y
            </button>
            <button 
              className={`nav-item ${activeTab === 'salary' ? 'active' : ''}`}
              onClick={() => setActiveTab('salary')}
            >
              <FiBarChart2 className="icon" />
              L∆∞∆°ng c·ªßa t√¥i
            </button>
            <button 
              className={`nav-item ${activeTab === 'my-notifications' ? 'active' : ''}`}
              onClick={() => setActiveTab('my-notifications')}
            >
              <FiBell className="icon" />
              Th√¥ng b√°o ƒë√£ t·∫°o
            </button>
          </nav>
          
          {/* Navigation menu ·ªü g√≥c d∆∞·ªõi sidebar */}
          <div className="sidebar-bottom-nav">
          <button 
              className="nav-item"
              onClick={() => handleGoHome()}
            >
              <FiHome className="icon" />
              Trang ch·ªß
            </button>
            <button 
              className="nav-item"
              onClick={() => setShowProfileModal(true)}
            >
              <FiUser className="icon" />
              H·ªì s∆°
            </button>
            <button
              className="nav-item"
              style={{ position: 'relative' }}
              onClick={() => setShowNotificationModal(true)}
            >
              <MdNotifications className="icon" />
              Th√¥ng b√°o
              {notifications.length > 0 && (
                <span style={{
                  position: 'absolute',
                  top: 8,
                  right: 12,
                  background: '#b30000',
                  color: 'white',
                  borderRadius: '50%',
                  fontSize: '0.8rem',
                  width: 20,
                  height: 20,
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontWeight: 700
                }}>{notifications.length}</span>
              )}
            </button>
            <button 
              className="nav-item"
              onClick={() => handleLogout()}
            >
              <FiLogOut className="icon" />
              ƒêƒÉng xu·∫•t
            </button>
          </div>
        </aside>

        <main className="main-content">
          {activeTab === 'classes' && (
            <ClassesList
              classes={apiData.classes}
              loading={loading}
              error={error}
              onRetry={() => window.location.reload()}
              onShowClassDetail={classItem => { setSelectedClass(classItem); setShowClassDetail(true); }}
              showClassDetail={showClassDetail}
              selectedClass={selectedClass}
              onCloseClassDetail={() => setShowClassDetail(false)}
              getStatusBadge={getStatusBadge}
              formatSchedule={formatSchedule}
            />
          )}
          {activeTab === 'schedule' && (
            <ScheduleSection
              calendarDays={calendarDays}
              currentMonth={currentMonth}
              monthNames={monthNames}
              onPrevMonth={handlePrevMonth}
              onNextMonth={handleNextMonth}
              selectedDate={selectedDate}
              onDateClick={handleDateClick}
              getSelectedDateSchedule={getSelectedDateSchedule}
              onCloseDateDetails={() => setSelectedDate(null)}
              loading={loading}
              error={error}
              onRetry={() => window.location.reload()}
              userRole="teacher"
              apiData={apiData}
            />
          )}
          {activeTab === 'salary' && (
            <SalarySection
              userData={user}
              selectedSalaryMonth={selectedSalaryMonth}
              setSelectedSalaryMonth={setSelectedSalaryMonth}
              salaryPage={salaryPage}
              setSalaryPage={setSalaryPage}
              salaryPerPage={salaryPerPage}
            />
          )}
          {activeTab === 'my-notifications' && (
            <MyNotificationsSection
              myNotifications={myNotifications}
              loading={loadingMyNotifications}
              error={error}
              onRetry={() => window.location.reload()}
            />
          )}
        </main>
      </div>

      {/* Profile Modal */}
      {showProfileModal && (
        <ProfileModal user={user} onClose={() => setShowProfileModal(false)} />
      )}

      {/* Notification Modal */}
      <NotificationModal 
        isOpen={showNotificationModal} 
        onClose={() => setShowNotificationModal(false)} 
        user={user}
      />
    </div>
  )
}

export default TeacherDashboard